# üìÅ run.py - Enhanced with better error handling
"""
Multi-Exchange Trading Platform
Professional MT5-style interface with modular indicators
"""

import sys
import os
import logging
import traceback
from pathlib import Path

# Dodaj ≈õcie≈ºki do PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


# Sprawd≈∫ czy wszystkie wymagane pakiety sƒÖ dostƒôpne
def check_dependencies():
    """Sprawdza dostƒôpno≈õƒá pakiet√≥w"""
    try:
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        import tkinter as tk
        from tkinter import ttk
        print("‚úÖ Podstawowe pakiety dostƒôpne")
        return True
    except ImportError as e:
        print(f"‚ùå Brak wymaganego pakietu: {e}")
        print("Zainstaluj wymagane pakiety: pip install pandas numpy matplotlib")
        return False


def check_ccxt():
    """Sprawdza dostƒôpno≈õƒá ccxt"""
    try:
        import ccxt
        print("‚úÖ CCXT dostƒôpne - po≈ÇƒÖczenia z gie≈Çdami w≈ÇƒÖczone")
        return True
    except ImportError:
        print("‚ö†Ô∏è CCXT niedostƒôpne - tylko dane testowe")
        return False


def setup_logging():
    """Konfiguracja logowania"""
    log_dir = project_root / "logs"
    log_dir.mkdir(exist_ok=True)

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_dir / "trading_platform.log"),
            logging.StreamHandler()
        ]
    )


def safe_import_app():
    """Bezpieczny import aplikacji"""
    try:
        from app.main import TradingPlatform
        return TradingPlatform
    except ImportError as e:
        print(f"‚ùå B≈ÇƒÖd importu aplikacji: {e}")
        print("Sprawd≈∫ czy wszystkie pliki sƒÖ na miejscu")
        traceback.print_exc()
        return None


def main():
    """G≈Ç√≥wna funkcja uruchomieniowa z obs≈ÇugƒÖ b≈Çƒôd√≥w"""
    try:
        # Sprawd≈∫ dependencies
        if not check_dependencies():
            input("Naci≈õnij Enter aby zako≈Ñczyƒá...")
            return

        check_ccxt()
        setup_logging()

        print("üöÄ Uruchamianie Professional Trading Platform...")
        print("üìä Obs≈Çugiwane gie≈Çdy: Binance, Bybit, OKX, Kraken, Coinbase, KuCoin")
        print("‚è∞ Timeframes: M1, M5, M15, M30, H1, H4, D1, W1")
        print("üìà Wska≈∫niki: TMA (Triangular Moving Average) + CCI Arrows")
        print("üéØ Strategia: M5/M15 - Professional Scalping & Swing Trading")
        print("=" * 60)
        print("üîß Funkcje:")
        print("   ‚Ä¢ TMA z pasmami ATR - sygna≈Çy odbicia")
        print("   ‚Ä¢ CCI Arrows - momentum i punkty zwrotne")
        print("   ‚Ä¢ Dywergencje i multi-timeframe analysis")
        print("   ‚Ä¢ Auto-refresh danych w czasie rzeczywistym")
        print("   ‚Ä¢ Eksport wykres√≥w i danych")
        print("   ‚Ä¢ Sk≈Çadane panele kontrolne")
        print("   ‚Ä¢ Skr√≥ty klawiszowe i zaawansowane zoom")
        print("=" * 60)

        # Import aplikacji
        TradingPlatform = safe_import_app()
        if TradingPlatform is None:
            input("Naci≈õnij Enter aby zako≈Ñczyƒá...")
            return

        # Stw√≥rz i uruchom aplikacjƒô
        print("üì± Inicjalizacja GUI...")
        app = TradingPlatform()

        print("üé® ≈Åadowanie interfejsu...")
        print("üí° Wskaz√≥wka: Naci≈õnij F11 dla pe≈Çnego ekranu")
        print("üí° Kliknij prawym przyciskiem na wykres dla opcji")
        print("üí° U≈ºyj Ctrl+R aby od≈õwie≈ºyƒá dane")
        print("üí° Skr√≥ty: R-reset zoom, S-save, G-grid, L-legend")
        print()
        print("üü¢ Aplikacja gotowa! Mi≈Çego tradingu! üìà")
        print("=" * 60)

        # Uruchom g≈Ç√≥wnƒÖ pƒôtlƒô
        app.run()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Zatrzymano przez u≈ºytkownika")

    except Exception as e:
        print(f"\n‚ùå KRYTYCZNY B≈ÅƒÑD: {e}")
        print("\nüìã Stack trace:")
        traceback.print_exc()
        print("\nüîß Troubleshooting:")
        print("1. Sprawd≈∫ czy wszystkie pliki sƒÖ na miejscu")
        print("2. Sprawd≈∫ czy masz zainstalowane wymagane pakiety")
        print("3. Sprawd≈∫ czy nie ma konfliktu z innymi aplikacjami")
        print("4. Spr√≥buj uruchomiƒá z uprawnieniami administratora")
        print("5. Sprawd≈∫ log w folderze logs/")

        input("\nNaci≈õnij Enter aby zako≈Ñczyƒá...")

    finally:
        print("\nüîö Zamykanie aplikacji...")
        # Cleanup resources if needed
        try:
            import matplotlib.pyplot as plt
            plt.close('all')
        except:
            pass


def run_safe_mode():
    """Tryb bezpieczny - minimalna konfiguracja"""
    print("üîß TRYB BEZPIECZNY - Minimalna konfiguracja")
    try:
        # Spr√≥buj uruchomiƒá z podstawowymi ustawieniami
        from app.main import TradingPlatform

        app = TradingPlatform()

        # Wy≈ÇƒÖcz auto-refresh na poczƒÖtku
        print("‚ö†Ô∏è Auto-refresh wy≈ÇƒÖczony w trybie bezpiecznym")

        app.run()

    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd nawet w trybie bezpiecznym: {e}")
        traceback.print_exc()


def interactive_setup():
    """Interaktywna konfiguracja przy pierwszym uruchomieniu"""
    print("üõ†Ô∏è PIERWSZA KONFIGURACJA")
    print("=" * 40)

    # Sprawd≈∫ ccxt
    has_ccxt = check_ccxt()

    if not has_ccxt:
        print("\n‚ùì Czy chcesz zainstalowaƒá CCXT dla po≈ÇƒÖcze≈Ñ z gie≈Çdami?")
        print("   (Bez tego bƒôdƒÖ tylko dane testowe)")
        choice = input("Tak/Nie [T/n]: ").lower()

        if choice in ['t', 'tak', 'y', 'yes', '']:
            print("üíª Instaluj: pip install ccxt")
            print("   Nastƒôpnie uruchom aplikacjƒô ponownie")
            return False

    print("\nüìä Wybierz domy≈õlnƒÖ konfiguracjƒô:")
    print("1. Scalping (M1, M5) - Szybkie sygna≈Çy")
    print("2. Day Trading (M15, M30) - Balans")
    print("3. Swing Trading (H1, H4) - D≈Çugoterminowe")
    print("4. Custom - W≈Çasne ustawienia")

    choice = input("Wyb√≥r [1-4]: ")

    configs = {
        '1': {'timeframe': 'M5', 'style': 'aggressive'},
        '2': {'timeframe': 'M15', 'style': 'balanced'},
        '3': {'timeframe': 'H1', 'style': 'conservative'},
        '4': {'timeframe': 'M5', 'style': 'balanced'}  # default
    }

    config = configs.get(choice, configs['2'])
    print(f"‚úÖ Wybrano: {config}")

    return True


if __name__ == "__main__":
    print("üè¶ PROFESSIONAL TRADING PLATFORM")
    print("üî• MT5-Style Multi-Exchange Interface")
    print("‚ö° TMA + CCI Arrows - Professional Signals")
    print("=" * 50)

    # Sprawd≈∫ argumenty linii komend
    if len(sys.argv) > 1:
        if sys.argv[1] == '--safe':
            run_safe_mode()
        elif sys.argv[1] == '--setup':
            if interactive_setup():
                main()
        elif sys.argv[1] == '--help':
            print("üìñ OPCJE URUCHOMIENIA:")
            print("  python run.py          - Normalne uruchomienie")
            print("  python run.py --safe   - Tryb bezpieczny")
            print("  python run.py --setup  - Konfiguracja")
            print("  python run.py --help   - Ta pomoc")
        else:
            print(f"‚ùì Nieznana opcja: {sys.argv[1]}")
            print("U≈ºyj --help dla listy opcji")
    else:
        # Normalne uruchomienie
        main()